#!/bin/bash

. ${INSTALL_CONF}/global_functions

###########################################################
## Functions checking if different programs/files are installed
###########################################################

# FUNCTION: is_checked
# Description: test if the dependancy was already checked
# Parameters:
#	$1 - dependancy name
# Variables set: none
is_checked()
{
[ "$1" = "" ] && return 0
in_list $1 $CHECKED_DEPENDENCIES && return 0
return 1
}
# END OF is_checked

# FUNCTION: set_checked
# Description: set dependancy as checked
# Parameters:
#	$1 - dependancy name
# Variables set: none
set_checked()
{
[ "$1" = "" ] && return 0
in_list $1 $CHECKED_DEPENDENCIES && return 0
export CHECKED_DEPENDENCIES="$CHECKED_DEPENDENCIES $1"
return 0
}
# END OF set_checked

# FUNCTION: check4_pwd
# Description: check if pwd executable is installed
# Parameters: none
# Variables set:
#	PWD - pwd full path
#	output - error message (if any)
check4_pwd()
{
is_checked pwd && return 0
check4_file pwd --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export PWD=$file_path
set_checked pwd
return 0
}
# END OF check4_pwd

# FUNCTION: check4_make
# Description: check if make executable is installed
# Parameters: none
# Variables set:
#	MAKE - make full path
#	output - error message (if any)
check4_make()
{
is_checked make && return 0
for make_cmd in gmake make; do
    check4_file $make_cmd --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin" &> /dev/null
    if [ $? -eq 0 ]; then
	export MAKE=$file_path
	set_checked make
	return 0
    fi
done
output="Could not find make utility. Please install make package."
return 1
}
# END OF check4_make

# FUNCTION: check4_mkdir
# Description: check if mkdir executable is installed
# Parameters: none
# Variables set:
#	MKDIR - mkdir full path
#	output - error message (if any)
check4_mkdir()
{
is_checked mkdir && return 0
check4_file mkdir --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export MKDIR=$file_path
set_checked mkdir
return 0
}
# END OF check4_mkdir

# FUNCTION: check4_ls
# Description: check if ls executable is installed
# Parameters: none
# Variables set:
#	LS - ls full path
#	output - error message (if any)
check4_ls()
{
is_checked ls && return 0
check4_file ls --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export LS=$file_path
set_checked ls
return 0
}
# END OF check4_ls

# FUNCTION: check4_chown
# Description: check if chown executable is installed
# Parameters: none
# Variables set:
#	CHOWN - chown full path
#	output - error message (if any)
check4_chown()
{
is_checked chown && return 0
check4_file chown --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/sbin"
result=$? && [ $result -ne 0 ] && return 1
export CHOWN=$file_path
set_checked chown
return 0
}
# END OF check4_chown

# FUNCTION: check4_chmod
# Description: check if chmod executable is installed
# Parameters: none
# Variables set:
#	CHMOD - chmod full path
#	output - error message (if any)
check4_chmod()
{
is_checked chmod && return 0
check4_file chmod --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export CHMOD=$file_path
set_checked chmod
return 0
}
# END OF check4_chmod

# FUNCTION: check4_cat
# Description: check if cat executable is installed
# Parameters: none
# Variables set:
#	CAT - cat full path
#	output - error message (if any)
check4_cat()
{
is_checked cat && return 0
check4_file cat --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export CAT=$file_path
set_checked cat
return 0
}
# END OF check4_cat

# FUNCTION: check4_cut
# Description: check if cut executable is installed
# Parameters: none
# Variables set:
#	CUT - cut full path
#	output - error message (if any)
check4_cut()
{
is_checked cut && return 0
check4_file cut --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export CUT=$file_path
set_checked cut
return 0
}
# END OF check4_cut

# FUNCTION: check4_grep
# Description: check if grep executable is installed
# Parameters: none
# Variables set:
#	GREP - grep full path
#	output - error message (if any)
check4_grep()
{
is_checked grep && return 0
check4_file grep --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && output="Could not find grep utility. Please install grep package." && return 1
export GREP=$file_path
set_checked grep
return 0
}
# END OF check4_grep

# FUNCTION: check4_cp
# Description: check if cp executable is installed
# Parameters: none
# Variables set:
#	CP - cp full path
#	output - error message (if any)
check4_cp()
{
is_checked cp && return 0
check4_file cp --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export CP=$file_path
set_checked cp
return 0
}
# END OF check4_cp

# FUNCTION: check4_rm
# Description: check if rm executable is installed
# Parameters: none
# Variables set:
#	RM - rm full path
#	output - error message (if any)
check4_rm()
{
is_checked rm && return 0
check4_file rm --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1
export RM=$file_path
set_checked rm
return 0
}
# END OF check4_rm

# FUNCTION: check4_clear
# Description: check if clear executable is installed
# Parameters: none
# Variables set:
#	CLEAR - clear full path
#	output - error message (if any)
check4_clear()
{
is_checked clear && return 0
check4_file clear --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && output="Could not find 'clear' utility. Please install ncurses package." && return 1
export CLEAR=$file_path
set_checked clear
return 0
}
# END OF check4_clear

# FUNCTION: check4_locate
# Description: check if locate executable is installed
# Parameters: none
# Variables set:
#	LOCATE - locate full path
#	output - error message (if any)
check4_locate()
{
is_checked locate && return 0
check4_file locate --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && output="Could not find 'locate' utility. Please install slocate package." && return 1
export LOCATE=$file_path
set_checked locate
return 0
}
# END OF check4_locate

# FUNCTION: check4_mysql
# Description: check if mysql executable is installed
# Parameters: none
# Variables set:
#	MYSQL - mysql full path
#	output - error message (if any)
check4_mysql()
{
is_checked mysql && return 0
check4_file mysql --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/local/mysql/bin"
result=$? && [ $result -ne 0 ] && output="Could not find 'mysql' client utility. Please install mysql-client package." && return 1
export MYSQL=$file_path
set_checked mysql
return 0
}
# END OF check4_mysql

# FUNCTION: check4_mysqladmin
# Description: check if mysqladmin executable is installed
# Parameters: none
# Variables set:
#	MYSQLADMIN - mysql full path
#	output - error message (if any)
check4_mysqladmin()
{
is_checked mysqladmin && return 0
check4_file mysqladmin --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin:/usr/local/mysql/bin"
result=$? && [ $result -ne 0 ] && output="Could not find 'mysqladmin' client utility. Please install mysql-client package." && return 1
export MYSQLADMIN=$file_path
set_checked mysqladmin
return 0
}
# END OF check4_mysqladmin

# FUNCTION: check4_mysqld
# Description: check if mysqld executable is installed
# Parameters: none
# Variables set:
#	MYSQLD - mysqld full path
#	output - error message (if any)
check4_mysqld()
{
is_checked mysqld && return 0
check4_file mysqld --executable --path "/sbin:/usr/sbin:/usr/local/sbin:/opt/sbin:/usr/libexec:/usr/local/mysql/bin:/usr/local/mysql/libexec:/usr/local/libexec"
result=$? && [ $result -ne 0 ] && output="Could not find 'mysqld' server. Please install mysql package." && return 1
export MYSQLD=$file_path
set_checked mysqld
return 0
}
# END OF check4_mysqld

# FUNCTION: check4_crond
# Description: check if crond executable is installed
# Parameters: --force - force check even if already checked
# Variables set:
#	CROND - crond full path
#	output - error message (if any)
check4_crond()
{
[ "$1" != "--force" ] && is_checked crond && return 0
check4_file cron --executable --path "/sbin:/usr/sbin:/usr/local/sbin:/opt/sbin" &> /dev/null
if [ $? -ne 0 ]; then
    check4_file crond --executable --path "/sbin:/usr/sbin:/usr/local/sbin:/opt/sbin"
    result=$? && [ $result -ne 0 ] && output="Could not find 'crond' server. Please install vixie-cron package." && return 1
fi
export CROND=$file_path
set_checked crond
return 0
}
# END OF check4_crond

# FUNCTION: check4_passwd
# Description: check if passwd file is installed
# Parameters: none
# Variables set:
#	PASSWD - passwd full path
#	output - error message (if any)
check4_passwd()
{
is_checked passwd && return 0
check4_file passwd --file --path "/etc"
result=$? && [ $result -ne 0 ] && output="Could not find 'passwd' utility. Please install passwd package." && return 1
export PASSWD=$file_path
set_checked passwd
return 0
}
# END OF check4_passwd

# FUNCTION: check4_group
# Description: check if group file is installed
# Parameters: none
# Variables set:
#	GROUP - group full path
#	output - error message (if any)
check4_group()
{
is_checked group && return 0
check4_file group --file --path "/etc"
result=$? && [ $result -ne 0 ] && return 1
export GROUP=$file_path
set_checked group
return 0
}
# END OF check4_group

# FUNCTION: check4_apache
# Description: check if apache is installed and where is it installed
# Parameters:
#	--interactive - read apache binary/config path from standard input
#	--apache_bin_path <path> - specifies the apache binary path
#	--apache_conf_path <path> - specifies the apache conf path
# Variables set:
#	apache_bin_path - path to apache binary
#	apache_conf_path - path to apache conf files
#	apache_bin_name - apache binary name
#	APACHE_USER - apache daemon user
#	APACHE_GROUP - apache daemon group
check4_apache()
{
is_checked apache && return 0
apache_bin_path=
apache_conf_path=
apache_bin_name=
bin_paths=
interactive=false
while [ "$1" != "" ]; do
    case $1 in
    --interactive) interactive=true ;;
    --apache_bin_path) shift 1; bin_paths=$1 ;;
    --apache_conf_path) shift 1; apache_conf_path=$1 ;;
    *) ;;
    esac
    shift 1
done
[ "$bin_paths" = "" ] && bin_paths="/sbin /usr/sbin /usr/local/apache/bin /home/apache/bin /home/httpd/bin /opt/apache/bin"
bin_names="apache httpd httpd2 apache2 httpds apache22"
for bn in $bin_names; do
    check4_file --executable "$bn" &> /dev/null
    [ $? -eq 0 ] && bin_path=$file_path && apache_bin_name="$bn" && break
    bin_path=""
done
if [ "$bin_path" = "" ]; then
    for bp in $bin_paths; do
	for nm in $bin_names; do
	    [ -x "${bp}/$nm" ] && bin_path="$bp" && apache_bin_name="$nm" && break
	done
    done
else
    bin_path=`cut_last_dirs "$bin_path" 1`
fi
while [ "$bin_path" = "" ]; do
    if $interactive; then
	choice_yn "Could not find apache binary. Do you want to supply one?" y
	if [ "$choice" = "N" ]; then
	    echo "Could not find apache binary file."
	    return 1
	fi
	read_path_with_test path_to_apache_binary --exp "fill in the path to apache binary"
	[ $? -ne 0 ] && return 1
	read_string apache_bin_name "" "fill in apache binary name"
	[ $? -ne 0 ] && apache_bin_name="" && return 1
	if [ ! -x "$path_to_apache_binary"/"$apache_bin_name" ]; then
	    echo "Invalid apache path/binary name"
	    apache_bin_name=""
	else
	    bin_path="$path_to_apache_binary"
	    break
	fi
    else
	echo "Could not find apache binary file."
	return 1
    fi
done
conf_file=${apache_bin_name}.conf
apache_bin_path="$bin_path"
if [ "$apache_conf_path" != "" ]; then
    conf_paths=$apache_conf_path
else
    conf_paths=""
    for bn in $bin_names; do
	conf_paths="$conf_paths /etc/${bn}/conf /etc/${bn} /usr/local/etc/${bn}/conf /usr/local/etc/${bn} /etc/apache2/${bn}"
    done
    conf_paths="$conf_paths "`cut_last_dirs "${apache_bin_path}"`/conf
fi
cf_path=""
cf_paths=""
for bn in $bin_names; do
    for conf_path in $conf_paths; do
	cf_paths="$cf_paths ${conf_path}/${bn}.conf"
	if [ -f "${conf_path}/${bn}.conf" ]; then
	    cf_path="${conf_path}/${bn}.conf"
	    break
	fi
    done
done
if [ "$cf_path" = "" ]; then
    if $interactive; then
	choice_yn "Could not find apache conf directory. Do you want to supply one?" y
	if [ "$choice" = "N" ]; then
	    echo "Could not find apache configuration file in $cf_paths"
	    return 1
	fi
	found=false
	while ! $found; do
	    read_path_with_test path_to_conf_directory --exp "fill in the path to apache configuration file"
	    [ $? -ne 0 ] && return 1
	    conf_path=$path_to_conf_directory
	    for cf_fn in $bin_names; do
		if [ -f "${conf_path}/${cf_fn}.conf" ]; then
		    conf_file=${cf_fn}.conf
		    found=true
		    break
		fi
	    done
	done
    else
	echo "Could not find apache configuration file in $cf_paths"
	return 1
    fi
else
	conf_path=`cut_last_dirs "$cf_path"`
fi
apache_conf_path=$conf_path
if $USER_INSTALL; then
    export APACHE_USER=$ROOT_USER
    export APACHE_GROUP=$ROOT_GROUP
    set_checked apache
    return 0
fi
conf_files="${conf_path}/${conf_file} ${conf_path}/commonhttpd.conf ${conf_path}/common${apache_bin_name}.conf ${conf_path}/httpd.conf ${conf_path}/apache.conf ${conf_path}/apache2.conf ${conf_path}/uid.conf"

user_line=`grep -h -E "^[[:space:]]*User[[:space:]]+" ${conf_files} 2> /dev/null`
if [ "$user_line" = "" ]; then
    echo "Invalid apache configuration files. Aborting."
    return 1
fi
i=1
for w in $user_line; do
    [ $i -eq 2 ] && apache_user=$w && break
    i=`expr $i + 1`
done
if [ "$APACHE_USER" != "" ]; then
    user_line=`grep -h -E "^[[:space:]]*User[[:space:]]+$APACHE_USER" ${conf_files} 2> /dev/null`
    if [ "$user_line" = "" ]; then
	echo "WARNING!!! The apache user '$APACHE_USER' is not valid; valid apache user is '$apache_user'";
    fi
else
    export APACHE_USER=$apache_user
fi

group_line=`grep -h -E "^[[:space:]]*Group[[:space:]]+" ${conf_files} 2> /dev/null`
if [ "$group_line" = "" ]; then
    echo "Invalid apache configuration files. Aborting."
    return 1
fi
i=1
for w in $group_line; do
    [ $i -eq 2 ] && apache_group=$w && break
    i=`expr $i + 1`
done
if [ "$APACHE_GROUP" != "" ]; then
    group_line=`grep -h -E "^[[:space:]]*Group[[:space:]]+$APACHE_GROUP" ${conf_files} 2> /dev/null`
    if [ "$group_line" = "" ]; then
	echo "WARNING!!! The apache group '$APACHE_GROUP' is not valid; valid apache group is '$apache_group'";
    fi
else
    export APACHE_GROUP=$apache_group
fi

set_checked apache
return 0
}
# END OF check4_apache

# FUNCTION: check4_iconv
# Description: check if iconv is installed
# Parameters: none
# Variables set:
#	ICONV - full path
#	output - error message (if any)
check4_iconv()
{
is_checked iconv && return 0
check4_file iconv --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && output="Could not find 'iconv' utility. Please install glibc package." && return 1
export ICONV=$file_path
set_checked iconv
return 0
}
# END OF check4_iconv

# FUNCTION: check4_killall
# Description: check for killall
# Parameters: none
# Variables set:
#	KILLALL - name of killall program
#	output - error message (if any)
check4_killall()
{
is_checked killall && return 0
if [ $OPENBSD -eq 1 ]; then
	KILLALL_CMD=zap
else
	KILLALL_CMD=killall
fi
check4_file $KILLALL_CMD --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
result=$? && [ $result -ne 0 ] && return 1

if [ $OPENBSD -eq 1 ]; then
	export KILLALL="${KILLALL_CMD} -y"
else
	export KILLALL=$KILLALL_CMD
fi
set_checked killall
return 0
}
# END OF check4_killall

# FUNCTION: check4_php_cli
# Description: check if php cli (command line interface) is installed
# Parameters: none
# Variables set:
#	PHP - php full path
#	output - error message (if any)
check4_php_cli()
{
is_checked php_cli && return 0
export PHP=
for p in /bin /usr/bin /opt/bin /usr/local/bin /usr/local/php/bin; do
    [ -x "$p/php" ] && export PHP="$p/php" && break
done
[ "$PHP" = "" ] && output="PHP CLI (Command Line Interface) not found. Please install this package" && return 1
set_checked php_cli
return 0
}
# END OF check4_php_cli

# FUNCTION: check4_php_mysql
# Description: check if php mysql module was installed
# Parameters: none
# Variables set:
#	output - error message (if any)
check4_php_mysql()
{
is_checked php_mysql && return 0
check4_php_cli || return 1
"$PHP" -q "$INSTALL_CONF/php_mysql_exists.php"
[ $? -ne 0 ] && output="PHP MySQL extension was not installed. Please install it." && return 1
set_checked php_mysql
return 0
}
# END OF check4_php_mysql

# FUNCTION: check4_php_apc
# Description: check if php apc extension was installed
# Parameters: none
# Variables set:
#	output - error message (if any)
check4_php_apc()
{
is_checked php_apc && return 0
check4_php_cli || return 1
"$PHP" -q "$INSTALL_CONF/php_apc_exists.php"
[ $? -ne 0 ] && output="PHP APC extension was not installed. Please install it." && return 1
set_checked php_apc
return 0
}
# END OF check4_php_apc

# FUNCTION: check4_php_gd
# Description: check if php gd module was installed
# Parameters: none
# Variables set:
#	output - error message (if any)
check4_php_gd()
{
is_checked php_gd && return 0
check4_php_cli || return 1
"$PHP" -q "$INSTALL_CONF/php_gd_exists.php"
[ $? -ne 0 ] && output="PHP GD graphics library was not installed. Please install it." && return 1
set_checked php_gd
return 0
}
# END OF check4_php_gd

# FUNCTION: check4_php_session
# Description: check if php session module was installed
# Parameters: none
# Variables set:
#	output - error message (if any)
check4_php_session()
{
is_checked php_session && return 0
check4_php_cli || return 1
"$PHP" -q "$INSTALL_CONF/php_session_exists.php"
[ $? -ne 0 ] && output="PHP session library was not installed. Please install it." && return 1
set_checked php_session
return 0
}
# END OF check4_php_session

# FUNCTION: check4_convert
# Description: check if ImageMagic package was installed
# Parameters: none
# Variables set:
#	output - error message (if any)
check4_convert()
{
is_checked convert && return 0
check4_file convert --executable --path "/bin:/usr/bin:/usr/local/bin:/opt/bin"
[ $? -ne 0 ] && output="ImageMagic package was not installed. Please install it." && return 1
set_checked convert
return 0
}
# END OF check4_convert
