<?php
// Call OperatorTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'OperatorTest::main');
}

require_once('PHPUnit/Framework.php');

require_once('template_engine/classes/Operator.php');

/**
 * Test class for Operator.
 * Generated by PHPUnit on 2007-08-30 at 15:40:58.
 */
class OperatorTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once('PHPUnit/TextUI/TestRunner.php');

        $suite  = new PHPUnit_Framework_TestSuite('OperatorTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName() {
        $exceptionThrown = false;
        try {
            $operator = new Operator('is', 'int');
        }
        catch (InvalidOperatorException $e) {
            $exceptionThrown = true;
        }
        $this->assertEquals(false, $exceptionThrown, 'Valid operator was not detected for int type.');

        $exceptionThrown = false;
        try {
            $operator = new Operator('greater', 'bool');
        }
        catch (InvalidOperatorException $e) {
            $exceptionThrown = true;
        }
        $this->assertEquals(true, $exceptionThrown, 'Invalid operator was not detected for bool type.');

        $exceptionThrown = false;
        try {
            $operator = new Operator('greater', 'switch');
        }
        catch (InvalidOperatorException $e) {
            $exceptionThrown = true;
        }
        $this->assertEquals(true, $exceptionThrown, 'Invalid operator was not detected for bool type.');

        $exceptionThrown = false;
        try {
            $operator = new Operator('greater', 'topic');
        }
        catch (InvalidOperatorException $e) {
            $exceptionThrown = true;
        }
        $this->assertEquals(true, $exceptionThrown, 'Invalid operator was not detected for bool type.');

        $exceptionThrown = false;
        try {
            $operator = new Operator('invalid', 'string');
        }
        catch (InvalidOperatorException $e) {
            $exceptionThrown = true;
        }
        $this->assertEquals(true, $exceptionThrown, 'Invalid operator was not detected.');
    }

    /**
     * @todo Implement testGetType().
     */
    public function testGetType() {
        $operator = new Operator('is', 'int');
        $this->assertEquals('int', $operator->getType());

        $operator = new Operator('is');
        $this->assertEquals('string', $operator->getType());

        $operator = new Operator('is', 'invalid type');
        $this->assertEquals('string', $operator->getType());
    }

    /**
     * @todo Implement testGetSymbol().
     */
    public function testGetSymbol() {
        $operator = new Operator('is');
        $this->assertEquals('=', $operator->getSymbol('sql'));

        $operator = new Operator('equal_smaller');
        $this->assertEquals('<=', $operator->getSymbol('sql'));

        $operator = new Operator('equal_greater');
        $this->assertEquals('>=', $operator->getSymbol('sql'));

        $operator = new Operator('smaller');
        $this->assertEquals('<', $operator->getSymbol('sql'));

        $operator = new Operator('greater');
        $this->assertEquals('>', $operator->getSymbol('sql'));

        $operator = new Operator('not');
        $this->assertEquals('<>', $operator->getSymbol('sql'));

        $operator = new Operator('is');
        $this->assertEquals('==', $operator->getSymbol('php'));

        $operator = new Operator('equal_smaller');
        $this->assertEquals('<=', $operator->getSymbol('php'));

        $operator = new Operator('equal_greater');
        $this->assertEquals('>=', $operator->getSymbol('php'));

        $operator = new Operator('smaller');
        $this->assertEquals('<', $operator->getSymbol('php'));

        $operator = new Operator('greater');
        $this->assertEquals('>', $operator->getSymbol('php'));

        $operator = new Operator('not');
        $this->assertEquals('!=', $operator->getSymbol('php'));
    }

    /**
     * @todo Implement testGetOperators().
     */
    public function testGetOperators() {
        $allOperators = array('is', 'equal_smaller', 'equal_greater', 'smaller',
                              'greater', 'not');
        $identityOperators = array('is', 'not');

        $this->assertEquals($allOperators, Operator::GetOperators('int'));
        $this->assertEquals($allOperators, Operator::GetOperators('string'));
        $this->assertEquals($identityOperators, Operator::GetOperators('bool'));
        $this->assertEquals($allOperators, Operator::GetOperators('date'));
        $this->assertEquals($allOperators, Operator::GetOperators('datetime'));
        $this->assertEquals($allOperators, Operator::GetOperators('time'));
        $this->assertEquals($allOperators, Operator::GetOperators('timestamp'));
        $this->assertEquals($identityOperators, Operator::GetOperators('switch'));
        $this->assertEquals($identityOperators, Operator::GetOperators('topic'));
    }
}

// Call OperatorTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'OperatorTest::main') {
    OperatorTest::main();
}
?>
