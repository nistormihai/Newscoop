/******************************************************************************
 
CAMPSITE is a Unicode-enabled multilingual web content
management system for news publications.
CAMPFIRE is a Unicode-enabled java-based near WYSIWYG text editor.
Copyright (C)2000,2001  Media Development Loan Fund
contact: contact@campware.org - http://www.campware.org
Campware encourages further development. Please let us know.
 
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
 
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
******************************************************************************/

/******************************************************************************
 
Define TOLParser class; this performs the semantic analisys and builds up the
actions tree. Every action corresponds to a template instruction. There are two
important methods: Parse - perform the parsing (builds the actions tree) and
WriteOutput - scans the actions tree and writes out the output. WriteOutput
receives a "context" as a parameter. The context contains all the cgi parameters
and other context information such as: user subscriptions, issue/section/article/
subtitle list index etc. By scanning the actions tree the context changes.
 
******************************************************************************/

#ifndef _TOL_PARSER_H
#define _TOL_PARSER_H

#include <hashtable.h>
#include <fstream.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "tol_types.h"
#include "tol_atoms.h"
#include "tol_lex.h"
#include "tol_context.h"
#include "tol_actions.h"
#include "mutex.h"

// ExStat class; exception thrown by TOLParser class: unable to stat template file
class ExStat
{
public:
	ExStat(int p_nErrNr) : m_nErrNr(p_nErrNr)
	{}
	~ExStat()
	{}

	int ErrNr() const
	{
		return m_nErrNr;
	}

private:
	int m_nErrNr;
};

// TOLParser: the template parser. Contains a lex, the semantic analyser and actions tree.
// The actions tree is generated by parsing the template.
// Important methods:
//		Parse - start the parser; build actions tree
//		WriteOutput - write the actions output; Parse must be called first
class TOLParser
{
private:
	TOLLex lex;					// lex
	string document_root;		// document root of current template
	pChar tpl;					// template file (complete path)
	struct stat tpl_stat;		// template file stat information
	TOLPActionList actions;		// actions tree
	TOLErrorList parse_err;		// list of parse errors
	TOLErrorList write_err;		// list of write errors
	bool parsed;				// true if the template was parsed
	TK_bool parse_err_printed;	// thread key variable: boolean value: true if parse
								// errors were printed
	TK_bool write_err_printed;	// thread key variable: boolean value: true if write
								// errors were printed
	StringHash parent_tpl;		// parent templates including this template (empty if none)
	StringHash child_tpl;		// child templates included by this template (empty if none)
	string2string fields;		//
	ULInt m_nTplFileLen;		// template file length
	int m_nTplFD;				// template file descriptor
	cpChar m_pchTplBuf;			// buffer mapped to template file
	CMutex m_coOpMutex;			// mutex used to control parser operations
	
	// static members
	static String2Int op_map;				// operators map: is, not, greater, smaller
	static pthread_once_t m_OpMapControl;	// control used to inialise static members
	static TOLCParser cparser;				// article content parser
	static TOLParserHash m_coPHash;			// hash of parsers: a parser instance
											// corresponds to a certain template
	static CMutex m_coHashMutex;			// mutex used to control parser hash operations
	static TK_MYSQL s_MYSQL;				// thread key variable: pointer to MySQL connection

	// private methods
	
	// OpMapInit: called only once to initialise the operators map
	static void OpMapInit();
	
	// MapTpl: map template file to m_pchTplBuf buffer
	void MapTpl() throw (ExStat);
	
	// UnMapTpl: unmap template file
	void UnMapTpl();
	
	// clearParseErrors: clear parse errors list
	void clearParseErrors();
	
	// clearWriteErrors: clear write errors list
	void clearWriteErrors();
	
	// LvStatements: return string containig statement names allowed in a given level:
	// root, list issue, list section, list article, list subtitle
	// Parameters:
	//		int level - level: LV_ROOT, LV_LISSUE, LV_LSECTION, LV_LARTICLE, LV_LSUBTITLE
	cpChar LvStatements(int level);
	
	// LvListSt: return string containig list type statements allowed in a given level:
	// root, list issue, list section, list article, list subtitle
	// Parameters:
	//		int level - level: LV_ROOT, LV_LISSUE, LV_LSECTION, LV_LARTICLE, LV_LSUBTITLE
	cpChar LvListSt(int level);
	
	// IfStatements: return string containing if type statements allowed in a given level
	// (root, list issue, list section, list article, list subtitle)
	// and sublevel (user, login, search, with etc.)
	// Parameters:
	//		int level - level: LV_ROOT, LV_LISSUE, LV_LSECTION, LV_LARTICLE, LV_LSUBTITLE
	//		int sublevel - sublevel: SUBLV_NONE, SUBLV_IFPREV, SUBLV_IFNEXT, SUBLV_IFLIST,
	//			SUBLV_IFISSUE, SUBLV_IFSECTION, SUBLV_IFARTICLE, SUBLV_EMPTYLIST,
	//			SUBLV_IFALLOWED, SUBLV_SUBSCRIPTION, SUBLV_USER, SUBLV_LOGIN, SUBLV_LOCAL
	//			SUBLV_IFPUBLICATION, SUBLV_SEARCH, SUBLV_SEARCHRESULT, SUBLV_WITH
	string IfStatements(int level, int sublevel);
	
	// PrintStatements: return string containig print type statements allowed in a given level
	// (root, list issue, list section, list article, list subtitle)
	// and sublevel (user, login, search, with etc.)
	string PrintStatements(int level, int sublevel);
	
	// EditStatements: return string containig edit type statements allowed in a given
	// sublevel (user, login, search, with etc.)
	string EditStatements(int sublevel);
	
	// SelectStatements: return string containig select type statements allowed in a given
	// sublevel (user, login, search, with etc.)
	string SelectStatements(int sublevel);
	
	// DEBUGLexem: print lexem debug information
	void DEBUGLexem(cpChar c, const TOLLexem* l);
	
	// WaitForStatementStart: read from input file until it finds a start statement
	const TOLLexem* WaitForStatementStart(TOLPActionList& al);
	
	// WaitForStatementEnd: read from input file until it finds an end statement
	const TOLLexem* WaitForStatementEnd(bool write_errors);
	
	// DTOperators: return string containing valid operators for a given type
	cpChar DTOperators(TDataType dt);
	
	// TypeOperators: return mask containing valid operators for a given type
	int TypeOperators(TDataType);
	
	// St2PMod: convert statement identifier to print modifier
	int St2PMod(int);
	
	// LMod2Level: return level corresponding to given list modifier
	int LMod2Level(TListModifier);
	
	// IMod2St: convert from if modifier to statement identifier
	cpChar IMod2St(TIfModifier);
	
	// MatchIModSt: return true if given if modifier matches given statement
	int MatchIModSt(TIfModifier, int);
	
	// TypeName: return string containing the name of the given type
	cpChar TypeName(TDataType);
	
	// ValidDataType: return true if the lexem is of requested data type
	// Parameters:
	//		const TOLLexem* l - lexem
	//		TDataType dt - requested data type
	int ValidDataType(const TOLLexem* l, TDataType dt);
	
	// ValidDateForm: return true if given string is a valid date format
	int ValidDateForm(const char* df);
	
	// SetWriteErrors: set the parse_err_printed and write_err_printed members
	// for this parser instance and for included templates
	void SetWriteErrors(bool p_bWriteErrors);

	// HLanguage: parse language statement; add TOLActLanguage action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HLanguage(TOLPActionList& al, int lv, int sublv);
	
	// HInclude: parse include statement; add TOLActInclude action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	int HInclude(TOLPActionList& al);
	
	// HPublication: parse publication statement; add TOLActPublication action to actions
	// list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		TOLStatement* st - pointer to publication statement (from lex statements)
	int HPublication(TOLPActionList& al, int level, int sublevel, TOLStatement* st);
	
	// HIssue: parse issue statement; add TOLActIssue action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		const TOLLexem* l - pointer to last lexem
	int HIssue(TOLPActionList& al, int level, int sublevel, const TOLLexem* l);
	
	// HSection: parse section statement; add TOLActSection action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		const TOLLexem* l - pointer to last lexem
	int HSection(TOLPActionList& al, int level, int sublevel, const TOLLexem* l);
	
	// HArticle: parse article statement; add TOLActArticle action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		const TOLLexem* l - pointer to last lexem
	int HArticle(TOLPActionList& al, int level, int sublevel, const TOLLexem* l);
	
	// HURLParameters: parse URLParameters statement; add TOLActURLParameters action to
	// actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		const TOLLexem* l - pointer to last lexem
	int HURLParameters(TOLPActionList& al, const TOLLexem* l);
	
	// HFormParameters: parse FormParameters statement; add TOLActFormParameters action to
	// actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	int HFormParameters(TOLPActionList& al);
	
	// HDate: parse date statement; add TOLActDate action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		const TOLLexem* l - pointer to last lexem
	int HDate(TOLPActionList& al, const TOLLexem* l);
	
	// HPrint: parse print statement; add TOLActPrint action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HPrint(TOLPActionList& al, int lv, int sublv);
	
	// HList: parse list statement; add TOLActList action to actions list (al)
	// All statements between List and EndList statements are parsed, added as actions
	// in TOLActList's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		const TOLLexem* l - pointer to last lexem
	int HList(TOLPActionList& al, int level, int sublevel, const TOLLexem* l);
	
	// HIf: parse if statement; add TOLActIf action to actions list (al)
	// All statements between If and EndIf statements are parsed, added as actions
	// in TOLActIf's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	//		const TOLLexem* l - pointer to last lexem
	int HIf(TOLPActionList& al, int lv, int sublv, const TOLLexem* l);
	
	// HLocal: parse local statement; add TOLActLocal action to actions list (al)
	// All statements between Local and EndLocal statements are parsed, added as actions
	// in TOLActLocal's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HLocal(TOLPActionList& al, int lv, int sublv);
	
	// HSubscription: parse subscription statement; add TOLActSubscription action to actions
	// list (al)
	// All statements between Subscription and EndSubscription statements are parsed,
	// added as actions in TOLActSubscription's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HSubscription(TOLPActionList& al, int lv, int sublv);
	
	// HEdit: parse edit statement; add TOLActEdit action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HEdit(TOLPActionList& al, int lv, int sublv);
	
	// HSelect: parse select statement; add TOLActSelect action to actions list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HSelect(TOLPActionList& al, int lv, int sublv);
	
	// HUser: parse user statement; add TOLActUser action to actions list (al)
	// All statements between User and EndUser statements are parsed, added as actions
	// in TOLActUsers's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HUser(TOLPActionList& al, int lv, int sublv);
	
	// HLogin: parse login statement; add TOLActLogin action to actions list (al)
	// All statements between Login and EndLogin statements are parsed, added as actions
	// in TOLActLogin's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HLogin(TOLPActionList& al, int lv, int sublv);
	
	// HSearch: parse search statement; add TOLActSearch action to actions list (al)
	// All statements between Search and EndSearch statements are parsed, added as actions
	// in TOLActSearch's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HSearch(TOLPActionList& al, int lv, int sublv);
	
	// HWith: parse with statement; add TOLActWith action to actions list (al)
	// All statements between With and EndWith statements are parsed, added as actions
	// in TOLActWith's list of actions
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int lv - current level
	//		int sublv - current sublevel
	int HWith(TOLPActionList& al, int lv, int sublv);
	
	// LevelParser: read lexems until it finds a statement or reaches end of file
	// Depending on read statement it calls on of HArticle, HDate, HEdit, HFormParameters,
	// HIf, HInclude, HIssue, HLanguage, HList, HLocal, HLogin, HPrint, HPublication,
	// HSearch, HSection, HSelect, HSubscription, HURLParameters, HUser, HWith methods.
	// It does not add actions to action list (al)
	// Parameters:
	//		TOLPActionList& al - reference to actions list
	//		int level - current level
	//		int sublevel - current sublevel
	//		int& last_st - last statement read
	int LevelParser(TOLPActionList& al, int level, int sublevel, int& last_st);

public:
	// TOLParser: constructor
	// Parameters:
	//		cpChar p_pchTpl - template path
	//		string dr = "" - document root
	TOLParser(cpChar p_pchTpl, string dr = "");
	
	// copy-constructor
	TOLParser(const TOLParser&);
	
	// destructor
	~TOLParser();

	// SetMYSQL: set MySQL connection
	// Parameters:
	//		MYSQL* p_pMYSQL - pointer to MySQL server connection
	static void SetMYSQL(MYSQL*);
	
	// assign operator
	const TOLParser& operator =(const TOLParser&);
	
	// Reset: reset parser: clear actions tree, reset lex, clear errors list
	void Reset();
	
	// Reset: reset all the parsers in the hash
	static void ResetHash();
	
	// GetHash: return parsers hash
	static TOLParserHash& GetHash()
	{
		return m_coPHash;
	}
	
	// LockHash: lock mutex controlling parser hash operations
	static void LockHash()
	{
		m_coHashMutex.Lock();
	}
	
	// UnlockHash: unlock mutex controlling parser hash operations
	static void UnlockHash()
	{
		m_coHashMutex.Unlock();
	}
	
	// SetDebug: set debug on/off
	void SetDebug(bool d)
	{
		TOLAction::SetDebug(d);
	}
	
	// DoDebug: return debug value: true/false
	bool DoDebug() const
	{
		return TOLAction::DoDebug();
	}
	
	// Parse: start the parser; return the parse result
	// Parameters:
	//		bool force = false - if true, force reparsing of template; if false, do not
	//			parse the template again if already parsed
	int Parse(bool force = false);
	
	// WriteOutput: write actions output to given file stream
	// Parameters:
	//		const TOLContext& c - context
	//		fstream& fs - output file stream
	int WriteOutput(const TOLContext& c, fstream& fs);
	
	// PrintParseErrors: print parse errors to given output stream
	// Parameters:
	//		fstream& fs - output file stream
	//		bool p_bMainTpl = false - true if this is the main template
	void PrintParseErrors(fstream& fs, bool p_bMainTpl = false);
	
	// PrintWriteErrors: print write errors to given output stream
	// Parameters:
	//		fstream& fs - output file stream
	//		bool p_bMainTpl = false - true if this is the main template
	void PrintWriteErrors(fstream& fs, bool p_bMainTpl = false);
	
	// TestLex: test the lex; debug purposes only
	void TestLex();
	
	// PrintLexStatements: print lex statements; debug purposes only
	void PrintLexStatements()
	{
		lex.PrintStatements();
	}

	friend cpChar TOLParserValue(const TOLParser*);
};

inline cpChar TOLParserValue(const TOLParser* p)
{
	if (p != NULL)
		return p->tpl;
	return NULL;
}

#endif
