#!/bin/sh

configure_campsite()
{
    rm -f install_log
    echo -e "\nSTEP 1"
    echo -n "Configuring campsite for uninstall..."
    echo -e "###############################################\n\tConfiguring campsite\n" >> install_log
    ./configure --read_only --root_only $* >> install_log 2>&1
    err_code=$?
    if [ $err_code -ne 0 ]; then
	echo "ERROR."
	echo "Read install_log for more information on configuration error."
	echo "Please report bug to http://www.campware.org/bugs"
	exit 1
    fi
    echo "done"
}

backup_database()
{
    bd_not_interactive=""
    confirm="y"
    while [ "$1" != "" ]; do
	case $1 in
	--not_interactive) bd_not_interactive=--not_interactive ;;
	--no_db_backup) confirm=n; bd_not_interactive=--not_interactive ;;
	esac
	shift 1
    done
    echo -e "\nSTEP 2"
    if [ "$bd_not_interactive" != "--not_interactive" ]; then
	echo -n "Do you want to backup the database before uninstalling (Y/N)? [Y]: "
	read confirm
    fi
    if [ "$confirm" = "Y" ] || [ "$confirm" = "y" ] || [ "$confirm" = "" ]; then
	echo -n "Backing up the database..."
	mysqldump -u root campsite > $$CAMPSITE-database.sql
	err_code=$?
	if [ $err_code -ne 0 ]; then
	    echo "ERROR"
	    echo -e "To uninstall without backing up the database use --no_db_backup parameter.\nAborting..."
	    rm -f $$CAMPSITE-database.sql
	    exit 1
	fi
	mv -f $$CAMPSITE-database.sql CAMPSITE-database.sql
	echo "done"
	echo "Database was backed up to CAMPSITE-database.sql file."
    else
	echo "Skipped database backup."
    fi
    export DROP_DB="Y"
}

uninstall_campsite()
{
    u_not_interactive="false"
    confirm="n"
    while [ "$1" != "" ]; do
	case $1 in
	--not_interactive) confirm=y; u_not_interactive=true ;;
	esac
	shift 1
    done
    echo -e "\nSTEP 3"
    echo "Uninstalling CAMPSITE..."
    if [ "$u_not_interactive" = "false" ]; then
	echo -n "Are you sure you want to uninstall CAMPSITE application (Y/N)? [N]: "
	read confirm
    fi
    if [ "$confirm" != "Y" ] && [ "$confirm" != "y" ]; then
	echo "Exiting..."
	exit 0
    fi
    if [ -x $BIN_DIR/campsitectl ]; then
	echo -n -e "\nStopping campsite_server daemon..."
	$BIN_DIR/campsitectl stop
	err_code=$?
	if [ $err_code -ne 0 ]; then
	    echo "ERROR"
	else
	    echo "done"
	fi
    fi
    echo -e "###############################################\n\tUninstalling campsite\n" >> uninstall_log
    make uninstall >> uninstall_log 2>&1
    err_code=$?
    if [ $err_code -ne 0 ]; then
	echo "ERROR."
	echo "Read uninstall_log for more information on uninstall error."
	echo "Please report bug to http://www.campware.org/campsite/bugs.htm"
	exit 1
    fi
    echo -e "\nCAMPSITE was uninstalled successfully."
    echo "For a complete uninstallation log read uninstall_log file."
    echo -e -n "\nIMPORTANT!!!\nPlease remove apache configuration related to"
    echo -e " CAMPSITE\napplication (see INSTALL file for more information)."
}


# start execution
my_id=`id -u`
go_to_uninstall=false
force_uninstall=false
not_interactive=""
no_db_backup=""
while [ "$1" != "" ]; do
    case $1 in
    --go_to_uninstall) go_to_uninstall=true ;;
    --force) force_uninstall=true ;;
    --not_interactive) not_interactive=--not_interactive ;;
    --no_db_backup) no_db_backup=--no_db_backup ;;
    esac
    shift 1
done
if [ "$not_interactive" = "--not_interactive" ] && [ "$my_id" -ne 0 ]; then
    echo "Unistall must be run as root to work not interactivelly."
    exit 1
fi
. ./configure --define_start_env &> /dev/null
if [ "$go_to_uninstall" = "true" ] && [ $my_id -eq 0 ]; then
    uninstall_campsite
    exit 0
fi
if ! grep $APP_NAME $CAMPSITE_REGISTER &> /dev/null && [ "$force_uninstall" = "false" ]; then
    echo -e "CAMPSITE $CAMPSITE_VERSION ($APP_NAME) is not installed.\nUse --force parameter in order to force the uninstall."
    exit 1
fi
if [ "$1" = "--version" ]; then
    echo -e "CAMPSITE $CAMPSITE_VERSION, released on $CAMPSITE_RELEASE_DATE"
    exit 0
fi
echo -e "\nUninstalling CAMPSITE $CAMPSITE_VERSION"
if [ $my_id -ne 0 ]; then
    echo -e "\nYou are not logged in as root. Without root access this application"
    echo "can not be installed. You will be prompted for root password."
fi
configure_campsite $*
backup_database $not_interactive $no_db_backup
rm -f uninstall_log
if [ $my_id -ne 0 ]; then
    echo -e "\nIt is time to login as root. Please supply password."
    while true; do
	echo -n "Root password: "
	archive_path=`pwd`
	su - --command="echo ""; export DROP_DB=$DROP_DB; cd $archive_path; ./uninstall --go_to_uninstall $not_interactive $no_db_backup" 2> /dev/null
	err_code=$?
	if [ $err_code -ne 0 ]; then
	    echo -n -e "\nThe password was not correct. Try again (Y/N) ? [Y]: "
	    read yn
	    if [ "$yn" = "" ]; then
		yn="Y"
	    fi
	    if [ "${yn:0:1}" != "Y" ] && [ "${yn:0:1}" != "y" ]; then
		echo "Aborting..."
		exit 1
	    fi
	else
	    exit 0
	fi
    done
else
    uninstall_campsite $not_interactive
fi
exit 0
