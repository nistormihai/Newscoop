#!/bin/bash

. ${INSTALL_CONF}/conf_functions

configure_campsite()
{
cc_upgrade=""
cc_interactive=""
while [ "$1" != "" ]; do
    case $1 in
    --upgrade) cc_upgrade="$1" ;;
    --interactive) cc_interactive="$1" ;;
    esac
    shift 1
done

if [ "$cc_interactive" = "--interactive" ]; then

echo -e "\nCampsite application is composed out of modules. Before installing"
echo "campsite they must be configured."
echo ""
choice_yn "Do you want to read the description of campsite modules?" N
if [ "$choice" = "Y" ]; then
    clear
    echo "Campsite modules description:"
    modules_desc
    echo -n -e "\nPress ENTER when ready"
    read
    clear
fi

fi # interactive

prepare_install_env || exit 1
check_install_deps || exit 1
check_install_config $cc_upgrade
if $is_installed && [ "$cc_upgrade" != "--upgrade" ]; then
    [ "$cc_interactive" != "--interactive" ] && exit 1
    echo "There is another older campsite instance already installed."
    choice_yn "Do you want to upgrade the current installation?" Y
    if [ "$choice" = "Y" ]; then
	cc_upgrade=--upgrade
	export upgrade=--upgrade
	modules_conf --set || return 1
    else
	echo "Installing new instance of campsite..."
    fi
fi

if [ "$cc_interactive" = "--interactive" ]; then

configure_install $cc_upgrade
[ $? -ne 0 ] && echo "Error configuring install parameters" && exit 1
install_conf --set
. $"$INSTALL_CONF/../configure" --define_start_env &> /dev/null
[ $? -ne 0 ] && echo "Error configuring install environment" && exit 1

export MODULES_LIST="DATABASE PARSER EVENT_HANDLERS SEARCH_ENGINE ADMIN_INTERFACE"
echo "Please wait while checking modules configuration..."
for cc_mod in $MODULES_LIST; do
    check_module_deps $cc_mod $cc_interactive
    if [ $? -ne 0 ]; then
	if [ "$output" != "" ]; then echo $output; fi
	echo "There is a dependecy problem. Please read the previous message and"
	echo "install the required program/package".
	exit 1
    fi
done
for cc_mod in $NEED_CONFIG_MODULES; do
    prepare_${cc_mod}_env
    if [ $? -ne 0 ]; then
	echo "Error preparing environment for $cc_mod module."
	echo "Please report bug to http://www.campware.org/bugs"
	echo "Aborting..."
	exit 1
    fi
    check_${cc_mod}_config $cc_interactive || exit 1
done
cc_err_msg=""
while true; do
    echo -e "\nThe following list shows modules that are configurable."
    echo "Modules not shown in this list are not configurable at this stage."
    echo "Modules checked with X have a valid configuration."
    cc_index=1
    all_ok=true
    for cc_mod in $NEED_CONFIG_MODULES; do
	echo -e -n "\t${cc_index}. ["
	if in_list $cc_mod $CHECKED_MODULES; then
	    echo -n "X"
	else
	    echo -n " "
	    all_ok=false
	fi
	echo "] $cc_mod"
	cc_index=`expr $cc_index + 1`
    done
    cc_index=`expr $cc_index - 1`
    echo -e "\nMenu\n\t1. Configure a module\n\t0. Exit module configuration"
    echo -e -n "$cc_err_msg\nSelect a choice: "
    read -r choice
    if [ "$choice" != "0" ] && [ "$choice" != "1" ]; then
	cc_err_msg="Invalid choice $choice"
    else
	case $choice in
	1)
	    read_string module_number
	    cc_m_nr=$module_number
	    cc_err_msg=""
	    if [ $cc_m_nr -gt $cc_index ] || [ 0 -ge $cc_m_nr ]; then
		cc_err_msg="Invalid module number $module_number"
	    else
		cc_mod_name=`list_item $module_number $NEED_CONFIG_MODULES`
		configure_module $cc_mod_name check_${cc_mod_name}_config
	    fi ;;
	0)
	    cc_err_msg=""
	    if $all_ok; then
		break
	    else
		choice_yn "Not all modules are properly configured. Abort?" N
		[ "$choice" = "Y" ] && echo "Aborting..." && exit 1
	    fi ;;
	esac
    fi
done
choice_yn "\nCampsite configuration is completed. Do you want to review it?" Y
if [ "$choice" = "Y" ]; then
    echo -e "\nInstall configuration"
    install_conf
    echo -e "\nTo continue press ENTER"
    read
    for cc_mod in $NEED_CONFIG_MODULES; do
	echo "$cc_mod configuration:"
	modules_conf $cc_mod
	[ $? -ne 0 ] && return $?
	echo -e "\nTo continue press ENTER"
	read
    done
fi

fi # interactive

}
