<?php
// Call ArticleImageTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "ArticleImageTest::main");
}

require_once('PHPUnit/Framework/TestCase.php');
require_once('PHPUnit/Framework/TestSuite.php');

require_once('template_engine/classes/ComparisonOperation.php');
require_once('template_engine/classes/Operator.php');
require_once('classes/ArticleImage.php');

require_once('set_path.php');
require_once('db_connect.php');

/**
 * Test class for ArticleImage.
 * Generated by PHPUnit_Util_Skeleton on 2007-07-02 at 13:27:00.
 */
class ArticleImageTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once('PHPUnit/TextUI/TestRunner.php');

        $suite  = new PHPUnit_Framework_TestSuite('ArticleImageTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    public function testGetList()
    {
        global $g_ado_db;

        // builds the constraint
        $leftOperand = 'ArticleImages.NrArticle';
        $rightOperand = '34';
        $operator = new Operator('is', 'sql');
        $comparisonOperationObj = new ComparisonOperation($leftOperand,
                                                          $operator,
                                                          $rightOperand);

        // sets the params for ArticleImage::GetList()
        $params = array($comparisonOperationObj);
        $order = array('Number' => 'DESC');
        $limitStart = 0;
        $limitOffset = 0;

        // gets the list of article images
        $imagesList = ArticleImage::GetList($params, $order, $limitStart, $limitOffset);

        $iList = array();
        $sql = 'SELECT Images.* FROM Images, ArticleImages WHERE ArticleImages.IdImage = Images.Id AND ArticleImages.NrArticle = 34 ORDER BY Number DESC';
        $images = $g_ado_db->GetAll($sql);
        foreach ($images as $image) {
            $iList[] = new Image($image['Id']);
        }

        $this->assertEquals(sizeof($iList), sizeof($imagesList));

        $i = 0;
        foreach ($imagesList as $image) {
            $this->assertEquals($iList[$i]->getImageStorageLocation(), $image->getImageStorageLocation());
            $i++;
        }
    } // fn testGetList

    public function testGetListBadParameter()
    {
        global $g_ado_db;

        // builds the constraint
        $leftOperand = 'ArticleImages.Number';
        $rightOperand = 2;
        $operator = new Operator('is', 'sql');
        $comparisonOperationObj = new ComparisonOperation($leftOperand,
                                                          $operator,
                                                          $rightOperand);

        // sets the params for ArticleImage::GetList()
        $params = array($comparisonOperationObj);
        $order = array();
        $limitStart = 0;
        $limitOffset = 5;

        $this->assertEquals(null, ArticleImage::GetList($params, $order, $limitStart, $limitOffset));
    } // fn testGetListBadParameter

} // class ArticleImageTest

// Call ArticleImageTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "ArticleImageTest::main") {
    ArticleImageTest::main();
}
?>