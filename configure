#!/bin/bash

export PREFIX_DIR=/usr/local
export USER_INSTALL=false

if [ "`uname | grep BSD`" != "" ]; then
    export BSD=1
else
    export BSD=0
fi;
if [ "`uname | grep OpenBSD`" != "" ]; then
    export OPENBSD=1
else
    export OPENBSD=0
fi;
if ! $USER_INSTALL; then
	export ROOT_USER=root
	if [ $BSD -eq 1 ]; then
		export ROOT_GROUP=wheel
	else
		export ROOT_GROUP=root
	fi
else
	export ROOT_USER=`id -un`
	export ROOT_GROUP=`id -gn`
fi
export APACHE_CONF_PATH=""
export APACHE_BIN_PATH=""


# set the directory where campsite is located and install conf directory
cdir=`pwd`
[ $? -ne 0 ] && echo "Error reading campsite directory: pwd command does not exist" && exit 1
export CAMPSITE_PACKAGE_DIR=$cdir
export INSTALL_CONF=${CAMPSITE_PACKAGE_DIR}/install_conf
. ${INSTALL_CONF}/install_functions

for m in php_cli make mkdir chown chmod cut cat grep cp rm locate; do
    check4_$m
    [ $? -ne 0 ] && echo $output && exit 1
done


# set version, release date and install log
version_string=`cat ${CAMPSITE_PACKAGE_DIR}/README | grep -w ^version | grep ":" | cut -f 2 -d ":"`
[ $? -ne 0 ] && echo "Error reading campsite version" && exit 1
CAMPSITE_VERSION=
RELEASE_NAME=
for v in $version_string; do
    if [ "$CAMPSITE_VERSION" = "" ]; then
	CAMPSITE_VERSION=$v
    else
	if [ "$RELEASE_NAME" = "" ]; then
	    RELEASE_NAME=$v
	else
	    RELEASE_NAME="$RELEASE_NAME $v"
	fi
    fi
done
export CAMPSITE_RELEASE_DATE=release_date
export INSTALL_LOG=${CAMPSITE_PACKAGE_DIR}/install_log


# read intall options from configuration files
install_conf --reset
modules_conf --set
for mod in $configurable_modules; do
    modules_conf --reset $mod
done


display_help()
{
    echo -e "\nSystem specific parameters:"
    echo -e "    --root_user [my_root_user]: set the root user to my_root_user"
    echo -e "    --root_group [my_root_group]: set the root group to my_root_group"
    echo -e "\nApache configuration parameters:"
    echo -e "Use these options in case you have a custom apache install."
    echo -e "    --apache_user [my_apache_user]: set the apache user to my_apache_user"
    echo -e "    --apache_group [my_apache_group]: set the apache group to my_apache_group"
    echo -e "    --apache_conf_path [apache_conf_path]: set the apache configuration path"
    echo -e "    --apache_bin_path [apache_bin_path]: set the apache daemon path"
    echo -e "\nInstall directories:"
    echo -e "    --prefix [prefix_dir]: use [prefix_dir] as the base directory; campsite"
    echo -e "        directory will be created here"
    echo -e "    --campsite_dir [campsite_dir]: set the campsite install directory"
    echo -e "        (overrides --prefix option)"
    echo -e "    --bin_dir [bin_dir]: set the campsite binaries directory"
    echo -e "    --sbin_dir [sbin_dir]: set the campsite admin binaries directory"
    echo -e "    --etc_dir [etc_dir]: set the campsite configuration directory"
    echo -e "    --www_dir [www_dir]: set the campsite WWW directory; instance document root"
    echo -e "        and cgi directories will be installed here."
    echo -e "    --www_common_dir [www_common_dir]: set the campsite WWW common directory;"
    echo -e "        document root and cgi directories containing files common to all"
    echo -e "        instances will be installed here."
    echo -e "\nOther:"
    echo -e "    --parser_start_port [start_port]: the template engine (parser) creates a"
    echo -e "        network connection in order to listen for template requests. Each"
    echo -e "        instance will be assigned one network port automatically. This specifies"
    echo -e "        the first value from which to start assigning ports."
    echo -e "    --read_only: do not make any changes to configuration files"
    echo -e "    --help: print this help and exit"
    exit 0
}


# read user install options
c_define_start_env=""
root_only=false
read_only=false
set_prefix_dir=false
set_campsite_dir=false
set_bin_dir=false
set_sbin_dir=false
set_etc_dir=false
set_www_dir=false
set_www_common_dir=false
while [ "$1" != "" ]; do
    case $1 in
    --define_start_env) c_define_start_env=--define_start_env ;;
    --root_user) export ROOT_USER=$2; shift 1 ;;
    --root_group) export ROOT_GROUP=$2; shift 1 ;;
    --apache_user) export APACHE_USER=$2; shift 1 ;;
    --apache_group) export APACHE_GROUP=$2; shift 1 ;;
    --apache_conf_path) export APACHE_CONF_PATH=$2; shift 1 ;;
    --apache_bin_path) export APACHE_BIN_PATH=$2; shift 1 ;;
    --read_only) read_only=true ;;
    --prefix) export PREFIX_DIR=$2; set_prefix_dir=true; shift 1 ;;
    --campsite_dir) export CAMPSITE_DIR=$2; set_campsite_dir=true; shift 1 ;;
    --bin_dir) export BIN_DIR=$2; set_bin_dir=true; shift 1 ;;
    --sbin_dir) export SBIN_DIR=$2; set_sbin_dir=true; shift 1 ;;
    --etc_dir) export ETC_DIR=$2; set_etc_dir=true; shift 1 ;;
    --www_dir) export WWW_DIR=$2; set_www_dir=true; shift 1 ;;
    --www_common_dir) export WWW_COMMON_DIR=$2; set_www_common_dir=true; shift 1 ;;
    --parser_start_port) export PARSER_START_PORT=$2; shift 1 ;;
    --help) display_help; exit 0 ;;
    *) echo "ERROR: Invalid parameter $1"; echo -n "Usage:"; display_help; exit 1 ;;
    esac
    shift 1
done

if $set_prefix_dir; then
    export CAMPSITE_DIR=$PREFIX_DIR/campsite
    set_campsite_dir=true
fi

if $set_campsite_dir; then
    ! $set_bin_dir && export BIN_DIR=$CAMPSITE_DIR/bin
    ! $set_sbin_dir && export SBIN_DIR=$CAMPSITE_DIR/sbin
    ! $set_etc_dir && export ETC_DIR=$CAMPSITE_DIR/etc
    ! $set_www_dir && export WWW_DIR=$CAMPSITE_DIR/www
    ! $set_www_common_dir && export WWW_COMMON_DIR=$CAMPSITE_DIR/www-common
fi

# set extra install directories
HTML_COMMON_DIR=$WWW_COMMON_DIR/html
PRIV_COMMON_DIR=$WWW_COMMON_DIR/html/priv
CGI_COMMON_DIR=$WWW_COMMON_DIR/cgi-bin


if [ "$c_define_start_env" != "--define_start_env" ]; then

for m in ls gcc gpp pear curl; do
    check4_$m
    [ $? -ne 0 ] && echo $output && exit 1
done

if [ "$read_only" = "false" ]; then
    do_install_full_config $c_define_start_env || exit 1
    set_install_config
    modules_conf --set || exit 1
    for mod in $modules; do
	do_module_full_config $mod $c_define_start_env || exit 1
	set_module_config $mod
    done
else
    prepare_install_env || exit 1
    install_conf --set || exit 1
    for mod in $MODULES_LIST; do
	prepare_${mod}_env || exit 1
    done
    modules_conf --set $mod || exit 1
fi

echo -n "Writing campsite_config script..."
campsite_config_script=${INSTALL_CONF}/campsite_config
rm -f "$campsite_config_script"
cat > "$campsite_config_script" << EOF
#!/bin/bash

[ "\$1" = "--campsite_dir" ] && echo -n "$CAMPSITE_DIR"
[ "\$1" = "--bin_dir" ] && echo -n "$BIN_DIR"
[ "\$1" = "--sbin_dir" ] && echo -n "$SBIN_DIR"
[ "\$1" = "--etc_dir" ] && echo -n "$ETC_DIR"
[ "\$1" = "--www_dir" ] && echo -n "$WWW_DIR"
[ "\$1" = "--www_common_dir" ] && echo -n "$WWW_COMMON_DIR"
[ "\$1" = "--php_cli" ] && echo -n "$PHP"
EOF
[ $? -ne 0 ] && echo "ERROR" && exit 1
chmod +x "$campsite_config_script"
echo "done"

echo -n "Writing make.env file..."
make_env=${CAMPSITE_PACKAGE_DIR}/.make.env.tmp
rm -f "$make_env"
cat > "$make_env" << EOF
export USER_INSTALL=$USER_INSTALL
export BSD=$BSD
export OPENBSD=$OPENBSD
export ROOT_USER=$ROOT_USER
export ROOT_GROUP=$ROOT_GROUP
export APACHE_USER=$APACHE_USER
export APACHE_GROUP=$APACHE_GROUP
export INSTALL_CONF=$INSTALL_CONF
export CAMPSITE_DIR=$CAMPSITE_DIR
export BIN_DIR=$BIN_DIR
export SBIN_DIR=$SBIN_DIR
export ETC_DIR=$ETC_DIR
export WWW_DIR=$WWW_DIR
export WWW_COMMON_DIR=$WWW_COMMON_DIR
export CGI_COMMON_DIR=$CGI_COMMON_DIR
export HTML_COMMON_DIR=$HTML_COMMON_DIR
export PRIV_COMMON_DIR=$PRIV_COMMON_DIR
export CAMPSITE_VERSION=$CAMPSITE_VERSION
export RELEASE_NAME=$RELEASE_NAME
export OLD_CAMPSITE_REGISTER=$OLD_CAMPSITE_REGISTER
export PROCESSOR_TYPE=\`uname -m\`
export MAKE=$MAKE
export IMPLEMENTATION_PARTS=$IMPLEMENTATION_PARTS
export HAVE_GETHOSTBYADDR_R=$HAVE_GETHOSTBYADDR_R
export HAVE_GETHOSTBYNAME_R=$HAVE_GETHOSTBYNAME_R
export HAVE_GETSERVBYNAME_R=$HAVE_GETSERVBYNAME_R
export PTHREAD_LINK=$PTHREAD_LINK
export MYSQL_H_PATH=$MYSQL_H_PATH
export LIBCRYPT_LINK=$LIBCRYPT_LINK
export NSL_LINK=$NSL_LINK
export KILLALL=$KILLALL
export PARSER_START_PORT=$PARSER_START_PORT
export XML_INCLUDE="$XML_INCLUDE"
export XML_LINK="$XML_LINK"
export CURL_CFLAGS="$CURL_CFLAGS"
export CURL_LINK="$CURL_LINK"
export PHP=$PHP
export PEAR=$PEAR
EOF
[ $? -ne 0 ] && echo "ERROR" && exit 1
[ "$GPP" != "" ] && echo "export GPP=$GPP" >> $make_env
[ "$LIBMYSQLCLIENT_PATH" != "" ] && echo "export LIBMYSQLCLIENT_PATH=$LIBMYSQLCLIENT_PATH" >> $make_env
[ "$LIBPTHREAD_PATH" != "" ] && echo "export LIBPTHREAD_PATH=$LIBPTHREAD_PATH" >> $make_env
written_modules=""
for mod in $MODULES_LIST; do
    preconf_mod=`preconf_modules $mod`
    [ $? -ne 0 ] && echo $preconf_mod && exit 1
    if [ "$preconf_mod" != "" ]; then
	for pmod in $preconf_mod; do
	    if ! in_list $pmod $written_modules; then
		attr_list=`modules_conf "$pmod" | cut -f 1 -d "#"`
		[ $? -ne 0 ] && return $?
		for a in $attr_list; do
		    echo "export $a" >> $make_env
		done
		written_modules="$written_modules $pmod"
	    fi
	done
    fi
    if ! in_list $mod $written_modules; then
	attr_list=`modules_conf "$mod" | cut -f 1 -d "#"`
	[ $? -ne 0 ] && return $?
	for a in $attr_list; do
	    echo "export $a" >> $make_env
	done
	written_modules="$written_modules $mod"
    fi
done
if [ -f "./make.env" ]; then
    diff "$make_env" "./make.env" &> /dev/null
    if [ $? -ne 0 ]; then
	rm -f "./make.env"
	mv "$make_env" "./make.env"
	echo "done"
    else
	echo "up to date"
    fi
    rm -f "$make_env"
else
    mv "$make_env" "./make.env"
    echo "done"
fi

campsite_version_php=${INSTALL_CONF}/campsite_version.php
if [ ! -f "$campsite_version_php" ] || [ "$campsite_version_php" -ot "./make.env" ]; then
echo -n -e "Writing campsite_version.php script..."
rm -f "$campsite_version_php"
version_str=$CAMPSITE_VERSION
[ "$RELEASE_NAME" != "" ] && version_str="$CAMPSITE_VERSION $RELEASE_NAME"
echo -e -n "<?php\n\n\$Campsite['VERSION'] = '$version_str';\n\n?>" > "$campsite_version_php"
[ $? -ne 0 ] && echo "ERROR" && exit 1
echo "done"
else
echo "The file campsite_version.php is up to date."
fi

campsite_configure_h=${INSTALL_CONF}/configure.h
if [ ! -f "$campsite_configure_h" ] || [ "$campsite_configure_h" -ot "./make.env" ]; then
echo -n -e "Writing configure.h header..."
rm -f "$campsite_configure_h"
cat > "$campsite_configure_h" << EOF
/******************************************************************************

    Defines the configuration directory

    WARNING!!! This file is generated. Do not edit!

******************************************************************************/

#ifndef _CONFIGURE_H
#define _CONFIGURE_H

#define ETC_DIR "$ETC_DIR"

#endif
EOF
[ $? -ne 0 ] && echo "ERROR" && exit 1
echo "done"
else
echo "Header file configure.h is up to date."
fi

for dir in implementation; do
    if [ -x ${dir}/configure ]; then
        echo "Configuring $dir ..."
        cd $dir && ./configure
        result=$?
        cd ..
        [ $result -ne 0 ] && echo "ERROR configuring $dir" && exit 1
    fi
done

else # else if define start env

    prepare_install_env || exit 1
    for m in apache killall; do
	check4_${m}
	[ $? -ne 0 ] && echo $output && exit 1
    done

fi # end if define start env

export ROOT_USER=$ROOT_USER
export ROOT_GROUP=$ROOT_GROUP
export APACHE_USER=$APACHE_USER
export APACHE_GROUP=$APACHE_GROUP
export CAMPSITE_DIR=$CAMPSITE_DIR
export BIN_DIR=$BIN_DIR
export SBIN_DIR=$SBIN_DIR
export ETC_DIR=$ETC_DIR
export WWW_DIR=$WWW_DIR
export WWW_COMMON_DIR=$WWW_COMMON_DIR
export CGI_COMMON_DIR=$CGI_COMMON_DIR
export HTML_COMMON_DIR=$HTML_COMMON_DIR
export PRIV_COMMON_DIR=$PRIV_COMMON_DIR
export CAMPSITE_VERSION=$CAMPSITE_VERSION
export RELEASE_NAME=$RELEASE_NAME
export OLD_CAMPSITE_REGISTER=/etc/campsite.reg
export PROCESSOR_TYPE=`uname -m`
export IMPLEMENTATION_PARTS=$IMPLEMENTATION_PARTS
export OLD_CAMPSITE_REGISTER=$OLD_CAMPSITE_REGISTER
export INSTALL_CONF=$INSTALL_CONF
export KILLALL=$KILLALL
export PARSER_START_PORT=$PARSER_START_PORT
export PHP=$PHP
export MAKE=$MAKE

